/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoreBranchesService } from "../storeBranches.service";
import { StoreBranchesCreateInput } from "./StoreBranchesCreateInput";
import { StoreBranches } from "./StoreBranches";
import { StoreBranchesFindManyArgs } from "./StoreBranchesFindManyArgs";
import { StoreBranchesWhereUniqueInput } from "./StoreBranchesWhereUniqueInput";
import { StoreBranchesUpdateInput } from "./StoreBranchesUpdateInput";

export class StoreBranchesControllerBase {
  constructor(protected readonly service: StoreBranchesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoreBranches })
  async createStoreBranches(
    @common.Body() data: StoreBranchesCreateInput
  ): Promise<StoreBranches> {
    return await this.service.createStoreBranches({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoreBranches] })
  @ApiNestedQuery(StoreBranchesFindManyArgs)
  async storeBranchesItems(
    @common.Req() request: Request
  ): Promise<StoreBranches[]> {
    const args = plainToClass(StoreBranchesFindManyArgs, request.query);
    return this.service.storeBranchesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoreBranches })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storeBranches(
    @common.Param() params: StoreBranchesWhereUniqueInput
  ): Promise<StoreBranches | null> {
    const result = await this.service.storeBranches({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoreBranches })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStoreBranches(
    @common.Param() params: StoreBranchesWhereUniqueInput,
    @common.Body() data: StoreBranchesUpdateInput
  ): Promise<StoreBranches | null> {
    try {
      return await this.service.updateStoreBranches({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoreBranches })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoreBranches(
    @common.Param() params: StoreBranchesWhereUniqueInput
  ): Promise<StoreBranches | null> {
    try {
      return await this.service.deleteStoreBranches({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
