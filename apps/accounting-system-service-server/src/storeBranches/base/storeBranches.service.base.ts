/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StoreBranches as PrismaStoreBranches } from "@prisma/client";

export class StoreBranchesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StoreBranchesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storeBranches.count(args);
  }

  async storeBranchesItems(
    args: Prisma.StoreBranchesFindManyArgs
  ): Promise<PrismaStoreBranches[]> {
    return this.prisma.storeBranches.findMany(args);
  }
  async storeBranches(
    args: Prisma.StoreBranchesFindUniqueArgs
  ): Promise<PrismaStoreBranches | null> {
    return this.prisma.storeBranches.findUnique(args);
  }
  async createStoreBranches(
    args: Prisma.StoreBranchesCreateArgs
  ): Promise<PrismaStoreBranches> {
    return this.prisma.storeBranches.create(args);
  }
  async updateStoreBranches(
    args: Prisma.StoreBranchesUpdateArgs
  ): Promise<PrismaStoreBranches> {
    return this.prisma.storeBranches.update(args);
  }
  async deleteStoreBranches(
    args: Prisma.StoreBranchesDeleteArgs
  ): Promise<PrismaStoreBranches> {
    return this.prisma.storeBranches.delete(args);
  }
}
